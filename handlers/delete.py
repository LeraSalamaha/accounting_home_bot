"""–ú–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
from datetime import datetime, date
from models import (
    session_scope,
    IncomeRecord,
    ExpenseRecord,
    IncomeCategory,
    ExpenseCategory
)
from telebot import types
import calendar
from typing import Dict, Any


class DeleteHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π (—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π/–¥–æ—Ö–æ–¥–æ–≤) —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞."""

    def __init__(self, bot, send_welcome_func):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π."""
        self.bot = bot
        self.send_welcome = send_welcome_func
        self.current_record_type = None
        self.user_records = {}
        self.date_selection_state: Dict[int, Dict[str, Any]] = {}
        self.register_handlers()

    def show_records(self, message, date_from, date_to=None):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –∑–∞ –¥–∞—Ç—É –∏–ª–∏ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫."""
        def format_amount(amount):
            """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ –Ω–∞—É—á–Ω–æ–π –Ω–æ—Ç–∞—Ü–∏–∏."""
            try:
                is_integer = (
                    isinstance(amount, float) and amount.is_integer()
                )
                if isinstance(amount, int) or is_integer:
                    return str(int(amount))
                if abs(amount) > 1e16:
                    return "{0:.0f}".format(amount)
                return str(amount)
            except Exception:
                return str(amount)

        user_id = message.chat.id
        model = (
            IncomeRecord
            if self.current_record_type == "income"
            else ExpenseRecord
        )
        with session_scope() as session:
            query = session.query(model).filter(model.user_id == user_id)

            if date_to:
                query = query.filter(model.date.between(date_from, date_to))
                date_text = (
                    f"—Å {date_from.strftime('%d.%m.%Y')} "
                    f"–ø–æ {date_to.strftime('%d.%m.%Y')}"
                )
            else:
                query = query.filter(model.date == date_from)
                date_text = f"–∑–∞ {date_from.strftime('%d.%m.%Y')}"

            records = query.order_by(model.date).all()

            if not records:
                self.bot.send_message(
                    user_id,
                    f"–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π {'–¥–æ—Ö–æ–¥–æ–≤' if self.current_record_type == 'income' else '—Ä–∞—Å—Ö–æ–¥–æ–≤'} {date_text}",
                    reply_markup=types.ReplyKeyboardRemove()
                )
                return self.send_welcome(message)

            self.user_records[user_id] = [
                {
                    'id': r.id,
                    'date': r.date.strftime('%d.%m.%Y'),
                    'category': r.category,
                    'amount': r.amount
                }
                for r in records
            ]

            markup = types.ReplyKeyboardMarkup(
                resize_keyboard=True,
                row_width=1
            )

            for i, record in enumerate(self.user_records[user_id], 1):
                formatted_amount = format_amount(record['amount'])
                btn_text = f"{i}. {record['date']} - {record['category']}: {formatted_amount} —Ä—É–±."
                markup.add(types.KeyboardButton(btn_text))

            markup.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))

            self.bot.send_message(
                user_id,
                f"üìã –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è {date_text}:",
                reply_markup=markup
            )

            self.bot.register_next_step_handler(
                message,
                self.process_deletion,
                user_id
            )

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥."""

        @self.bot.message_handler(func=lambda m: m.text == "–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å üóëÔ∏è")
        def delete_menu(message):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ", "–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å")
            markup.add("–ù–∞–∑–∞–¥")
            self.bot.send_message(
                message.chat.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=markup
            )

        @self.bot.message_handler(
            func=lambda m: m.text == "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"
        )
        def confirm_clear_all(message):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", "–û—Ç–º–µ–Ω–∞")
            self.bot.send_message(
                message.chat.id,
                "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
                reply_markup=markup
            )

        @self.bot.message_handler(
            func=lambda m: m.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ"
        )
        def clear_all_data(message):
            user_id = message.chat.id
            with session_scope() as session:
                session.query(IncomeRecord).filter_by(user_id=user_id).delete()
                session.query(ExpenseRecord).filter_by(user_id=user_id).delete()
                session.query(IncomeCategory).filter_by(user_id=user_id).delete()
                session.query(ExpenseCategory).filter_by(user_id=user_id).delete()

            self.bot.send_message(
                user_id,
                "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã",
                reply_markup=types.ReplyKeyboardRemove()
            )
            self.send_welcome(message)

        @self.bot.message_handler(
            func=lambda m: m.text == "–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å"
        )
        def select_record_type(message):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("–î–æ—Ö–æ–¥", "–†–∞—Å—Ö–æ–¥")
            markup.add("–ù–∞–∑–∞–¥")
            self.bot.send_message(
                message.chat.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                reply_markup=markup
            )

        @self.bot.message_handler(func=lambda m: m.text in ["–î–æ—Ö–æ–¥", "–†–∞—Å—Ö–æ–¥"])
        def set_record_type(message):
            self.current_record_type = "income" if message.text == "–î–æ—Ö–æ–¥" else "expense"
            self.show_year_selection(message, is_period=True)

        @self.bot.message_handler(func=lambda m: m.text == "–ù–∞–∑–∞–¥")
        def handle_back(message):
            self.send_welcome(message)



        @self.bot.message_handler(func=lambda m: m.text == "–û—Ç–º–µ–Ω–∞")
        def handle_cancel(message):
            if message.chat.id in self.date_selection_state:
                del self.date_selection_state[message.chat.id]
            self.bot.send_message(
                message.chat.id,
                "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=types.ReplyKeyboardRemove()
            )
            self.send_welcome(message)

    def show_year_selection(self, message, is_period: bool):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≥–æ–¥–∞."""
        user_id = message.chat.id
        current_year = datetime.now().year

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)

        years = list(range(2000, current_year + 2))
        for i in range(0, len(years), 4):
            row = [types.KeyboardButton(str(year)) for year in years[i:i+4]]
            markup.add(*row)

        markup.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))

        if user_id not in self.date_selection_state:
            self.date_selection_state[user_id] = {
                "is_period": is_period,
                "step": "start_year" if is_period else "year"
            }

        state = self.date_selection_state[user_id]

        if state.get("step") == "end_year":
            text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—ã–π –≥–æ–¥:"
        else:
            text = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –≥–æ–¥:" if is_period else "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:"

        msg = self.bot.send_message(user_id, text, reply_markup=markup)
        self.bot.register_next_step_handler(msg, self.process_year_selection)

    def show_month_selection(self, message, year: int, prefix: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞."""
        user_id = message.chat.id
        months_ru = [
            "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
            "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
        ]

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)

        for i in range(0, 12, 3):
            row = [types.KeyboardButton(month) for month in months_ru[i:i+3]]
            markup.add(*row)

        markup.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))

        text = f"–í—ã–±–µ—Ä–∏—Ç–µ {prefix} –º–µ—Å—è—Ü:" if prefix else "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:"
        msg = self.bot.send_message(user_id, text, reply_markup=markup)
        self.bot.register_next_step_handler(
            msg,
            self.process_month_selection,
            year
        )

    def process_month_selection(self, message, year: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞."""
        user_id = message.chat.id

        if message.text == "–û—Ç–º–µ–Ω–∞":
            if user_id in self.date_selection_state:
                del self.date_selection_state[user_id]
            return self.send_welcome(message)

        months_ru = [
            "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
            "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
        ]

        try:
            month = months_ru.index(message.text) + 1
        except ValueError:
            msg = self.bot.send_message(
                user_id,
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"
            )
            return self.bot.register_next_step_handler(
                msg,
                self.process_month_selection,
                year
            )

        state = self.date_selection_state.get(user_id)
        if not state:
            return self.send_welcome(message)

        state["month"] = month

        if state["is_period"]:
            if state["step"] == "start_month":
                state["step"] = "start_day"
                self.show_day_selection(message, year, month, "–Ω–∞—á–∞–ª—å–Ω—ã–π")
            elif state["step"] == "end_month":
                state["step"] = "end_day"
                self.show_day_selection(message, year, month, "–∫–æ–Ω–µ—á–Ω—ã–π")
        else:
            state["step"] = "day"
            self.show_day_selection(message, year, month, "")

    def show_day_selection(self, message, year: int, month: int, prefix: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –¥–Ω—è."""
        user_id = message.chat.id
        _, last_day = calendar.monthrange(year, month)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=7)

        days = list(range(1, last_day + 1))
        for i in range(0, len(days), 7):
            row = [types.KeyboardButton(str(day)) for day in days[i:i+7]]
            markup.add(*row)

        markup.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))

        month_name = [
            "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
            "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
        ][month - 1]

        text = f"–í—ã–±–µ—Ä–∏—Ç–µ {prefix} –¥–µ–Ω—å {month_name} {year} –≥–æ–¥–∞:" if prefix else f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å {month_name} {year} –≥–æ–¥–∞:"
        msg = self.bot.send_message(user_id, text, reply_markup=markup)
        self.bot.register_next_step_handler(
            msg,
            self.process_day_selection,
            year,
            month
        )

    def process_year_selection(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞."""
        user_id = message.chat.id

        if message.text == "–û—Ç–º–µ–Ω–∞":
            if user_id in self.date_selection_state:
                del self.date_selection_state[user_id]
            return self.send_welcome(message)

        try:
            year = int(message.text)
            current_year = datetime.now().year
            if year < 2000 or year > current_year + 1:
                raise ValueError
        except ValueError:
            msg = self.bot.send_message(
                user_id,
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"
            )
            return self.bot.register_next_step_handler(
                msg,
                self.process_year_selection
            )

        state = self.date_selection_state.get(user_id)
        if not state:
            return self.send_welcome(message)

        state["year"] = year

        if state["is_period"]:
            if state["step"] == "start_year":
                state["step"] = "start_month"
                self.show_month_selection(message, year, "–Ω–∞—á–∞–ª—å–Ω—ã–π")
            elif state["step"] == "end_year":
                state["step"] = "end_month"
                self.show_month_selection(message, year, "–∫–æ–Ω–µ—á–Ω—ã–π")
        else:
            state["step"] = "month"
            self.show_month_selection(message, year, "")

    def process_day_selection(self, message, year: int, month: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è."""
        user_id = message.chat.id

        if message.text == "–û—Ç–º–µ–Ω–∞":
            if user_id in self.date_selection_state:
                del self.date_selection_state[user_id]
            return self.send_welcome(message)

        try:
            day = int(message.text)
            _, last_day = calendar.monthrange(year, month)
            if day < 1 or day > last_day:
                raise ValueError
        except ValueError:
            msg = self.bot.send_message(
                user_id,
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"
            )
            return self.bot.register_next_step_handler(
                msg,
                self.process_day_selection,
                year,
                month
            )

        state = self.date_selection_state.get(user_id)
        if not state:
            return self.send_welcome(message)

        selected_date = date(year, month, day)

        if state["is_period"]:
            if state["step"] == "start_day":
                state["start_date"] = selected_date
                state["step"] = "end_year"

                self.date_selection_state[user_id] = state

                msg = self.bot.send_message(
                    user_id,
                    "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É",
                    reply_markup=types.ReplyKeyboardRemove()
                )
                self.show_year_selection(msg, is_period=True)
            elif state["step"] == "end_day":
                end_date = selected_date
                start_date = state["start_date"]

                if end_date < start_date:
                    self.bot.send_message(
                        user_id,
                        "‚ùå –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –Ω–∞—á–∞–ª—å–Ω–æ–π. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ."
                    )
                    if user_id in self.date_selection_state:
                        del self.date_selection_state[user_id]
                    return self.send_welcome(message)

                if user_id in self.date_selection_state:
                    del self.date_selection_state[user_id]
                self.show_records(message, start_date, end_date)
        else:
            if user_id in self.date_selection_state:
                del self.date_selection_state[user_id]
            self.show_records(message, selected_date)

    def process_deletion(self, message, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
        if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
            return self.send_welcome(message)

        try:
            num_str = message.text.split('.')[0]
            num = int(num_str.strip())

            if 1 <= num <= len(self.user_records.get(user_id, [])):
                record_id = self.user_records[user_id][num-1]['id']
                self.confirm_deletion(message, record_id)
            else:
                raise ValueError
        except (ValueError, IndexError):
            try:
                self.bot.send_message(
                    user_id,
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
                )
                self.bot.register_next_step_handler(
                    message,
                    self.process_deletion,
                    user_id
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
                self.send_welcome(message)

    def confirm_deletion(self, message, record_id):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏."""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–£–¥–∞–ª–∏—Ç—å", "–û—Ç–º–µ–Ω–∞")

        try:
            sent_msg = self.bot.send_message(
                message.chat.id,
                "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?",
                reply_markup=markup
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —É–¥–∞–ª–µ–Ω–∏–∏
            self.current_deletion = {
                'user_id': message.chat.id,
                'record_id': record_id,
                'message_id': sent_msg.message_id
            }

            self.bot.register_next_step_handler(
                sent_msg,
                self.handle_deletion_confirmation
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.send_welcome(message)

    def handle_deletion_confirmation(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è."""
        if not hasattr(self, 'current_deletion'):
            return self.send_welcome(message)

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–¥–Ω–æ–º—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            if message.text not in ["–£–¥–∞–ª–∏—Ç—å", "–û—Ç–º–µ–Ω–∞"]:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                markup.add("–£–¥–∞–ª–∏—Ç—å", "–û—Ç–º–µ–Ω–∞")

                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                try:
                    self.bot.delete_message(
                        message.chat.id,
                        message.message_id - 1
                    )
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

                msg = self.bot.send_message(
                    message.chat.id,
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
                    reply_markup=markup
                )

                self.bot.register_next_step_handler(
                    msg,
                    self.handle_deletion_confirmation
                )
                return

            if message.text == "–û—Ç–º–µ–Ω–∞":
                self.bot.send_message(
                    message.chat.id,
                    "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                    reply_markup=types.ReplyKeyboardRemove()
                )
                return self.send_welcome(message)

            if message.text == "–£–¥–∞–ª–∏—Ç—å":
                model = IncomeRecord if self.current_record_type == "income" else ExpenseRecord
                with session_scope() as session:
                    session.query(model).filter_by(
                        id=self.current_deletion['record_id']
                    ).delete()

                self.bot.send_message(
                    message.chat.id,
                    "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞",
                    reply_markup=types.ReplyKeyboardRemove()
                )
                return self.send_welcome(message)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
            try:
                self.bot.send_message(
                    message.chat.id,
                    "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏",
                    reply_markup=types.ReplyKeyboardRemove()
                )
            except Exception:
                pass
            return self.send_welcome(message)
        finally:
            if hasattr(self, 'current_deletion'):
                del self.current_deletion

        @self.bot.message_handler(
            func=lambda m: m.text in ["–£–¥–∞–ª–∏—Ç—å", "–û—Ç–º–µ–Ω–∞"]
        )
        def handle_confirmation(m):
            if not hasattr(self, 'current_deletion'):
                return self.send_welcome(m)

            record_id = self.current_deletion['record_id']

            if m.text == "–û—Ç–º–µ–Ω–∞":
                self.bot.send_message(
                    m.chat.id,
                    "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                    reply_markup=types.ReplyKeyboardRemove()
                )
                return self.send_welcome(m)

            model = IncomeRecord if self.current_record_type == "income" else ExpenseRecord
            with session_scope() as session:
                session.query(model).filter_by(id=record_id).delete()

            self.bot.send_message(
                m.chat.id,
                "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞",
                reply_markup=types.ReplyKeyboardRemove()
            )
            self.send_welcome(m)


def register_delete_handlers(bot, send_welcome_func):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–¥–∞–ª–µ–Ω–∏—è."""
    DeleteHandler(bot, send_welcome_func)
