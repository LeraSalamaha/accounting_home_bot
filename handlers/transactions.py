"""–ú–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤."""
from datetime import datetime, date
from telebot import types
from telebot.types import Message, CallbackQuery
from models import (
    session_scope,
    IncomeRecord,
    ExpenseRecord,
    IncomeCategory,
    ExpenseCategory
)


FORBIDDEN_WORDS = [
    '—Ö—É–π', '–ø–∏–∑–¥', '–µ–±–∞–Ω', '–µ–±–∞—Ç—å', '–±–ª—è', '–±–ª—è—Ç—å', '–ø–∏–¥–æ—Ä', '–ø–∏–¥–∞—Ä', '–≥–∞–Ω–¥–æ–Ω',
    '–º—É–¥–∞–∫', '—Å—É–∫–∞', '—à–ª—é—Ö–∞', '–¥–æ–ª–±–æ–µ–±', '–∑–∞–ª—É–ø–∞', '–≥–æ–Ω–¥–æ–Ω', '–ø–µ–¥—Ä–∏–∫', '—á–º–æ',
    '–µ–±–∞–ª', '–≤—ã–µ–±', '–Ω–∞–µ–±', '–æ—Ç—ä–µ–±', '–ø–æ–¥—ä–µ–±', '—Ä–∞–∑—ä–µ–±', '—Å—ä–µ–±', '—É–µ–±'
]

current_action = None
current_category = None
current_date = None
current_displayed_month = None
warning_shown = False

MONTH_NAMES = {
    1: "–Ø–Ω–≤–∞—Ä—å",
    2: "–§–µ–≤—Ä–∞–ª—å",
    3: "–ú–∞—Ä—Ç",
    4: "–ê–ø—Ä–µ–ª—å",
    5: "–ú–∞–π",
    6: "–ò—é–Ω—å",
    7: "–ò—é–ª—å",
    8: "–ê–≤–≥—É—Å—Ç",
    9: "–°–µ–Ω—Ç—è–±—Ä—å",
    10: "–û–∫—Ç—è–±—Ä—å",
    11: "–ù–æ—è–±—Ä—å",
    12: "–î–µ–∫–∞–±—Ä—å"
}


def contains_profanity(text):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏."""
    text_lower = text.lower()
    replacements = {'*': '', '.': '', '-': '', '_': '', ' ': ''}
    cleaned_text = ''.join(replacements.get(c, c) for c in text_lower)

    for word in FORBIDDEN_WORDS:
        if word in cleaned_text:
            return True
    return False


def register_transaction_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤."""
    @bot.message_handler(func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—ã üí≥")
    def add_expense_or_income(message: Message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥—ã")
        item2 = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã")
        markup.add(item1, item2)
        markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(
            message.chat.id,
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=markup
        )

    @bot.message_handler(
        func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥—ã"
    )
    def add_income(message: Message):
        global current_action, warning_shown
        if not warning_shown:
            warning_text = (
                "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!\n"
                "–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ —É –≤–∞—Å –ø–æ–ª—É—á–∏—Ç—Å—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞–ø–∏—Å–∏\n\n"
                "–ò–õ–ò\n\n"
                "–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é,\n"
                "–¢–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' –î–í–ê–ñ–î–´ \n"
            )
            bot.send_message(message.chat.id, warning_text)
            warning_shown = True
        current_action = "income"
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
        item2 = types.KeyboardButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
        markup.add(item1, item2)
        markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=markup
        )

    @bot.message_handler(
        func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã"
    )
    def add_expense(message):
        global current_action, warning_shown
        if not warning_shown:
            warning_text = (
                "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!\n"
                "–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ —É –≤–∞—Å –ø–æ–ª—É—á–∏—Ç—Å—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞–ø–∏—Å–∏\n\n"
                "–ò–õ–ò\n\n"
                "–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é,\n"
                "–¢–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' –î–í–ê–ñ–î–´ \n"
            )
            bot.send_message(message.chat.id, warning_text)
            warning_shown = True

        current_action = "expense"
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
        item2 = types.KeyboardButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
        markup.add(item1, item2)
        markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=markup
        )

    @bot.message_handler(
        func=lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
    )
    def create_category(message):

        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")

        bot.register_next_step_handler(
            message,
            lambda msg: save_category(msg, message.chat.id)
        )

    def save_category(message, user_id):
        if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
            return

        category_name = message.text

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –ª–µ–∫—Å–∏–∫—É
        if contains_profanity(category_name):
            bot.send_message(
                message.chat.id,
                "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
            )
            bot.register_next_step_handler(
                message,
                lambda msg: save_category(msg, user_id)
            )
            return

        with session_scope() as session:
            if current_action == "income":
                existing_categories = (
                    session.query(IncomeCategory)
                    .filter_by(user_id=user_id)
                    .all()
                )
            else:
                existing_categories = (
                    session.query(ExpenseCategory)
                    .filter_by(user_id=user_id)
                    .all()
                )

            if category_name not in [
                cat.name
                for cat in existing_categories if cat.user_id == user_id
            ]:
                if current_action == "income":
                    new_category = IncomeCategory(
                        user_id=user_id,
                        name=category_name
                    )
                    session.add(new_category)
                    bot.send_message(
                        message.chat.id,
                        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤ "
                        "—É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!"
                    )
                else:
                    new_category = ExpenseCategory(
                        user_id=user_id,
                        name=category_name
                    )
                    session.add(new_category)
                    bot.send_message(
                        message.chat.id,
                        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤ "
                        "—É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!"
                    )
            else:
                bot.send_message(
                    message.chat.id,
                    "–≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. "
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
                )

        if current_action == "income":
            add_income(message)
        else:
            add_expense(message)

    @bot.message_handler(
        func=lambda message: message.text == "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
    )
    def use_existing_category(message):
        user_id = message.chat.id

        if current_action == "income":
            with session_scope() as session:
                categories = (
                    session.query(IncomeCategory)
                    .filter_by(user_id=user_id)
                    .all()
                )
                if not categories:
                    bot.send_message(
                        message.chat.id,
                        "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤."
                    )
                    add_income(message)
                    return
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                for category in categories:
                    markup.add(types.KeyboardButton(category.name))
                markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
                bot.send_message(
                    message.chat.id,
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:",
                    reply_markup=markup
                )
                bot.register_next_step_handler(
                    message,
                    process_category_selection
                )
        else:
            with session_scope() as session:
                categories = (
                    session.query(ExpenseCategory)
                    .filter_by(user_id=user_id)
                    .all()
                )
                if not categories:
                    bot.send_message(
                        message.chat.id,
                        "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤."
                    )
                    add_expense(message)
                    return
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                for category in categories:
                    markup.add(types.KeyboardButton(category.name))
                markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
                bot.send_message(
                    message.chat.id,
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:",
                    reply_markup=markup
                )
                bot.register_next_step_handler(
                    message,
                    process_category_selection
                )

    def process_category_selection(message):
        global current_category, current_displayed_month
        if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            return

        user_id = message.chat.id
        category_name = message.text

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        with session_scope() as session:
            if current_action == "income":
                category_exists = session.query(IncomeCategory).filter_by(
                    user_id=user_id,
                    name=category_name
                ).first()
            else:
                category_exists = session.query(ExpenseCategory).filter_by(
                    user_id=user_id,
                    name=category_name
                ).first()

        if not category_exists:
            bot.send_message(
                message.chat.id,
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞."
            )
            use_existing_category(message)
            return

        current_category = category_name
        current_displayed_month = datetime.now()
        show_calendar(message, current_displayed_month)

    def show_calendar(message, month_date):
        markup = types.InlineKeyboardMarkup()

        # –ü–æ–ª—É—á–∞–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
        month_name = MONTH_NAMES.get(
            month_date.month,
            month_date.strftime('%B')
        )

        markup.row(
            types.InlineKeyboardButton("<<", callback_data=f"calendar_prev_{month_date.year}_{month_date.month}"),
            types.InlineKeyboardButton(f"{month_name} {month_date.year}", callback_data="ignore"),
            types.InlineKeyboardButton(">>", callback_data=f"calendar_next_{month_date.year}_{month_date.month}")
        )

        week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
        markup.row(*[types.InlineKeyboardButton(day, callback_data="ignore") for day in week_days])

        if month_date.month == 12:
            next_month = month_date.replace(
                year=month_date.year+1,
                month=1,
                day=1
            )
        else:
            next_month = month_date.replace(month=month_date.month+1, day=1)
        days_in_month = (next_month - month_date.replace(day=1)).days

        first_day_weekday = month_date.replace(day=1).weekday()

        days = []
        for _ in range(first_day_weekday):
            days.append(types.InlineKeyboardButton(" ", callback_data="ignore"))

        for day in range(1, days_in_month + 1):
            days.append(
                types.InlineKeyboardButton(
                    str(day),
                    callback_data=f"calendar_day_{month_date.year}_{month_date.month}_{day}"
                )
            )

        for i in range(0, len(days), 7):
            markup.row(*days[i:i+7])

        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
            reply_markup=markup
        )

    @bot.callback_query_handler(
        func=lambda call: call.data.startswith('calendar_')
    )
    def handle_calendar_callback(call: CallbackQuery):
        global current_displayed_month

        try:
            if call.data.startswith("calendar_day_"):
                _, _, year, month, day = call.data.split("_")
                selected_date = date(int(year), int(month), int(day))
                global current_date
                current_date = selected_date

                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {selected_date.strftime('%Y-%m-%d')}\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:"
                )
                bot.register_next_step_handler(
                    call.message,
                    process_amount_input
                )

            elif call.data.startswith("calendar_prev_"):
                _, _, year, month = call.data.split("_")
                year, month = int(year), int(month)
                if month == 1:
                    year -= 1
                    month = 12
                else:
                    month -= 1
                current_displayed_month = date(year, month, 1)
                show_calendar(call.message, current_displayed_month)
                bot.answer_callback_query(call.id)

            elif call.data.startswith("calendar_next_"):
                _, _, year, month = call.data.split("_")
                year, month = int(year), int(month)
                if month == 12:
                    year += 1
                    month = 1
                else:
                    month += 1
                current_displayed_month = date(year, month, 1)
                show_calendar(call.message, current_displayed_month)
                bot.answer_callback_query(call.id)

        except Exception as e:
            print(f"Error in calendar callback: {e}")
            bot.answer_callback_query(
                call.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
            )

    def process_amount_input(message):
        if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            return

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –∏–∑ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        cleaned_text = message.text.replace(' ', '')

        input_text = cleaned_text.replace(',', '.')
        if not input_text.replace('.', '').isdigit() or input_text.count('.') > 1:
            bot.send_message(
                message.chat.id,
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 150.50)"
            )
            bot.register_next_step_handler(message, process_amount_input)
            return

        try:
            amount = float(input_text)

            if '.' in input_text:
                formatted_amount = input_text.rstrip('0').rstrip('.') if '.' in input_text else input_text
            else:
                formatted_amount = input_text

            if current_action == "income":
                record = IncomeRecord(
                    user_id=message.chat.id,
                    category=current_category,
                    amount=amount,
                    date=current_date
                )
                success_message = f"–ó–∞–ø–∏—Å—å –æ –¥–æ—Ö–æ–¥–µ {formatted_amount} –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{current_category}'"
            else:
                record = ExpenseRecord(
                    user_id=message.chat.id,
                    category=current_category,
                    amount=amount,
                    date=current_date
                )
                success_message = f"–ó–∞–ø–∏—Å—å –æ —Ä–∞—Å—Ö–æ–¥–µ {formatted_amount} –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{current_category}'"

            with session_scope() as session:
                session.add(record)

            bot.send_message(
                message.chat.id,
                f"{success_message} –Ω–∞ –¥–∞—Ç—É '{current_date.strftime('%Y-%m-%d')}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!"
            )

            if current_action == "income":
                add_income(message)
            else:
                add_expense(message)

        except ValueError:
            bot.send_message(
                message.chat.id,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—É–º–º—ã."
            )
            bot.register_next_step_handler(message, process_amount_input)
